{"version":3,"sources":["app/weather/WeatherScreen.js"],"names":["WeatherScreen","props","appId","useAppId","_useParams","useParams","name","lat","lon","_useState","useState","_useState2","Object","_Users_vynguyen_Documents_Projects_My_Projects_weather_app_weather_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","noResult","setNoResult","_useState3","_useState4","loading","setLoading","_useState5","timezone","timezone_offset","current","dt","sunrise","sunset","temp","feels_like","pressure","humidity","dew_point","uvi","clouds","visibility","wind_speed","wind_deg","weather","id","main","description","icon","hourly","daily","_useState6","location","setLocation","_useState7","_useState8","isScrollable","setIsScrollable","_useState9","checkIsFavorite","_useState10","isFavorite","setIsFavorite","screenEl","useRef","_step","_iterator","_createForOfIteratorHelper","JSON","parse","window","localStorage","getItem","s","n","done","loc","value","err","e","f","useEffect","makeItClear","fetch","concat","finally","then","res","json","data","cod","filter","i","a","slice","Math","floor","rain","makeItRain","snow","makeItSnow","_map","map","time","DateTime","fromJSDate","Date","setZone","hour","_map2","currentTime","setTimeAndRain","clientHeight","innerHeight","catch","error","console","log","searchValue","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_common_Loaders__WEBPACK_IMPORTED_MODULE_10__","className","ref","toUpperCase","toFormat","round","min","max","capitalizeText","path","index","key","viewBox","preserveAspectRatio","style","zIndex","d","stroke","fill","onClick","document","getElementsByClassName","classList","toggle","type","event","preventDefault","favoriteLocations","removePosition","length","splice","setItem","stringify","push","victory__WEBPACK_IMPORTED_MODULE_4__","domainPadding","y","padding","top","right","bottom","left","containerComponent","victory__WEBPACK_IMPORTED_MODULE_5__","pointerEvents","userSelect","touchAction","height","victory__WEBPACK_IMPORTED_MODULE_6__","victory__WEBPACK_IMPORTED_MODULE_7__","interpolation","x","labels","_ref","datum","day","weekdayShort","src","alt"],"mappings":"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","file":"static/js/6.8de4e3f0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { DateTime } from 'luxon'\r\nimport { VictoryChart, VictoryLine, VictoryContainer, VictoryAxis } from 'victory'\r\nimport { makeItRain, makeItSnow, makeItClear, capitalizeText } from '../common/Utils'\r\nimport { useAppId } from '../App'\r\nimport { PageLoader } from '../common/Loaders'\r\nimport './WeatherScreen.css'\r\n\r\nfunction WeatherScreen(props) {\r\n  const appId = useAppId()\r\n  let { name, lat, lon } = useParams()\r\n  let [noResult, setNoResult] = useState(false)\r\n  let [loading, setLoading] = useState(false)\r\n  let [location, setLocation] = useState({\r\n    lat: 0,\r\n    lon: 0,\r\n    timezone: '',\r\n    timezone_offset: 0,\r\n    current: {\r\n      dt: 0,\r\n      sunrise: 0,\r\n      sunset: 0,\r\n      temp: 0,\r\n      feels_like: 0,\r\n      pressure: 0,\r\n      humidity: 0,\r\n      dew_point: 0,\r\n      uvi: 0,\r\n      clouds: 0,\r\n      visibility: 0,\r\n      wind_speed: 0,\r\n      wind_deg: 0,\r\n      weather: [\r\n        {\r\n          id: 0,\r\n          main: \"\",\r\n          description: \"\",\r\n          icon: \"\"\r\n        }\r\n      ]\r\n    },\r\n    hourly: [],\r\n    daily: []\r\n  })\r\n  let [isScrollable, setIsScrollable] = useState(true)\r\n  let [isFavorite, setIsFavorite] = useState(checkIsFavorite)\r\n  const screenEl = useRef(null) \r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    setIsFavorite(checkIsFavorite())\r\n    makeItClear()\r\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=${appId}&units=metric`)\r\n      .finally(() => setLoading(false))\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.cod) {\r\n          setNoResult(true)\r\n        } else {\r\n          setNoResult(false)\r\n          data.hourly = data.hourly.filter((e, i, a) => (i % 2 === 0)).slice(0, 7)\r\n          data.timezone = 'UTC' + ((data.timezone_offset/3600) >= 0 ? '+' : '') + Math.floor(data.timezone_offset/3600)\r\n          setLocation(data)\r\n          if (data.current.rain) makeItRain()\r\n          if (data.current.snow) makeItSnow()\r\n\r\n          let [currentTime, sunrise, sunset] = ['dt', 'sunrise', 'sunset'].map(time => \r\n            DateTime.fromJSDate(new Date(data.current[time] * 1000)).setZone(data.timezone).hour)\r\n          props.setTimeAndRain(currentTime, sunrise, sunset, !!(data.current.rain))\r\n        }\r\n        if(screenEl.current.clientHeight <= window.innerHeight) {\r\n          setIsScrollable(false)\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }, [props.searchValue, lat, lon])\r\n\r\n  function checkIsFavorite() {\r\n    let favoriteLocations = JSON.parse(window.localStorage.getItem('favoriteLocations')) || []\r\n    for(let loc of favoriteLocations) {\r\n      if (loc.lat == lat && loc.lon == lon) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  function updateFavorite(event) {\r\n    event.preventDefault()\r\n    let favoriteLocations = JSON.parse(window.localStorage.getItem('favoriteLocations')) || []\r\n    if (!isFavorite) {\r\n      favoriteLocations.push({name, lat, lon})\r\n      window.localStorage.setItem('favoriteLocations', JSON.stringify(favoriteLocations))\r\n      setIsFavorite(true)\r\n    } else {\r\n      let removePosition = -1\r\n      for (let i = 0; i < favoriteLocations.length; i++) {\r\n        if (favoriteLocations[i].lat == lat && favoriteLocations[i].lon == lon) {\r\n          removePosition = i\r\n          break\r\n        }\r\n      }\r\n      if (removePosition >= 0) {\r\n        favoriteLocations.splice(removePosition, 1)\r\n        window.localStorage.setItem('favoriteLocations', JSON.stringify(favoriteLocations))\r\n      }\r\n      setIsFavorite(false)\r\n    }\r\n  }\r\n\r\n  function toggleMoreDetails() {\r\n    document.getElementsByClassName('show-more-btn')[0].classList.toggle('show-more')\r\n    document.getElementsByClassName('weather-summary')[0].classList.toggle('show-more')\r\n    document.getElementsByClassName('weather-details')[0].classList.toggle('show-more')\r\n  }\r\n\r\n  return loading ? <PageLoader /> : noResult ?\r\n    (\r\n      <div className=\"screen\">\r\n        <span className=\"info-msg\"><i>No data found</i></span>\r\n      </div>\r\n    ) : (\r\n      <div className=\"screen weather-screen\" ref={screenEl}>\r\n        <section className=\"weather-summary back-row-toggle splat-toggle\">\r\n          <div className=\"rain front-row\" id=\"front-row\"></div>\r\n          <div className=\"rain back-row\" id=\"back-row\"></div>\r\n          <div className=\"snowflakes\"></div>\r\n\r\n          <h1>{name.toUpperCase()}</h1>\r\n          <h3>{DateTime.fromJSDate(new Date(location.current.dt * 1000)).setZone(location.timezone).toFormat('cccc, HH:mm')}</h3>\r\n          <div className=\"temp-range\">\r\n            <h1>{location.daily[0] ? Math.round(location.daily[0].temp.min) : Math.round(location.current.temp)}&deg;</h1>\r\n            <p>Low</p>\r\n          </div>\r\n          <div className=\"current-temp\">{Math.round(location.current.temp)}&deg;C</div>\r\n          <div className=\"temp-range\">\r\n            <h1>{location.daily[0] ? Math.round(location.daily[0].temp.max) : Math.round(location.current.temp)}&deg;</h1>\r\n            <p>High</p>\r\n          </div>\r\n          <h3 className=\"weather-status\">\r\n            {capitalizeText(location.current.weather[0].description)}\r\n          </h3>\r\n        </section>\r\n        <section className={'weather-details ' + (isScrollable ? '' : 'show-all')}>\r\n          {\r\n            [\r\n              'M0, 50 C150, 120 350,  0 500, 70 L500, 250 L0, 250 Z',\r\n              'M0, 30 C300, 0 400,   200 500, 20 L500, 250 L0, 250 Z',\r\n              'M0, 50 C150, 200 350,  0 500, 50 L500, 250 L0, 250 Z'\r\n            ].map((path, index) => (\r\n              <div className=\"wavy-border-container\" key={index}>\r\n                <svg className=\"wavy-border\" viewBox=\"0 0 500 150\"\r\n                  preserveAspectRatio=\"xMinYMin meet\"\r\n                  style={{zIndex: -1}}>\r\n                  <path d={path} \r\n                  style={{stroke: 'none', fill: 'rgba(255, 255, 255, 0.5)'}}></path>\r\n                </svg>\r\n              </div>\r\n            ))\r\n          }\r\n\r\n          {/* <div className={'show-more-btn ' + (isScrollable ? '' : 'hidden')} onClick={toggleMoreDetails}></div> */}\r\n          <div className=\"show-more-btn hidden\" onClick={toggleMoreDetails}></div>\r\n          <button type=\"button\" className=\"icon-btn save-location-btn\" onClick={updateFavorite}>\r\n            {isFavorite ? (\r\n              <i className=\"material-icons\">favorite</i>\r\n            ) : (\r\n              <i className=\"material-icons\">favorite_border</i>\r\n            )}\r\n          </button>\r\n\r\n          <section className=\"weather-current\">\r\n            <div className=\"weather-stat\"><span>Humidity:</span> {location.current.humidity || 0} %</div>\r\n            <div className=\"weather-stat\"><span>Pressure:</span> {location.current.pressure || 0} hPa</div>\r\n            <div className=\"weather-stat\"><span>Wind:</span> {location.current.wind_speed || 0} m/s</div>\r\n            <div className=\"weather-stat\"><span>Cloud:</span> {location.current.clouds || 0} %</div>\r\n            <div className=\"weather-stat\"><span>Rain:</span> {location.current.rain ? location.current.rain['1h'] : 0} mm</div>\r\n            <div className=\"weather-stat\"><span>Snow:</span> {location.current.snow ? location.current.snow['1h'] : 0} mm</div>\r\n          </section>\r\n\r\n          {location.hourly.length &&\r\n            <section className=\"hourly-forecast\">\r\n              <h3 className=\"section_label\">Forecast</h3>\r\n              <VictoryChart\r\n                domainPadding={{ y: 10 }}\r\n                padding={{ top: 40, right: 20, bottom: 40, left: 20 }}\r\n                containerComponent={\r\n                  <VictoryContainer style={{\r\n                    pointerEvents: \"auto\",\r\n                    userSelect: \"auto\",\r\n                    touchAction: \"auto\"\r\n                  }} />\r\n                }\r\n                height={150}\r\n              >\r\n                <VictoryAxis />\r\n                <VictoryLine\r\n                  style={{\r\n                    data: { stroke: \"#c43a31\" }\r\n                  }}\r\n                  interpolation=\"natural\"\r\n                  data={\r\n                    location.hourly.map(hour => {\r\n                      let time = DateTime.fromJSDate(new Date(hour.dt * 1000)).setZone(location.timezone).hour\r\n                      return ({\r\n                        x: time > 12 ? `${time - 12}pm` : `${time}am`,\r\n                        y: Math.round(hour.temp)\r\n                      })\r\n                    })\r\n                  }\r\n                  labels={({ datum }) => datum.y + '\\xB0'}\r\n                />\r\n              </VictoryChart>\r\n            </section>\r\n          }\r\n\r\n          {location.daily.length &&\r\n            <section className=\"daily-forecast\">\r\n              <h3 className=\"section_label\">This week</h3>\r\n              <div className=\"scroll-container\">\r\n                <ul className=\"daily-forecast__list\">\r\n                  {location.daily.map(day => (\r\n                    <li className=\"daily-forecast__item\" key={day.dt}>\r\n                      <p>{DateTime.fromJSDate(new Date(day.dt * 1000)).setZone(location.timezone).weekdayShort}</p>\r\n                      <img src={\"https://openweathermap.org/img/wn/\" + day.weather[0].icon + \"@2x.png\"} alt=\"\" className=\"weather-icon daily-forecast__icon\" />\r\n                      <p>{Math.round(day.temp.min)}&deg; - {Math.round(day.temp.max)}&deg;</p>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n\r\n            </section>\r\n          }\r\n        </section>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default WeatherScreen"],"sourceRoot":""}