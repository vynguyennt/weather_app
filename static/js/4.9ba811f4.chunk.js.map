{"version":3,"sources":["app/weather/WeatherScreen.js"],"names":["WeatherScreen","props","_useParams","useParams","name","lat","lon","_useState","useState","_useState2","Object","_Users_vynguyen_Documents_Projects_My_Projects_weather_app_weather_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","noResult","setNoResult","_useState3","timezone","timezone_offset","current","dt","sunrise","sunset","temp","feels_like","pressure","humidity","dew_point","uvi","clouds","visibility","wind_speed","wind_deg","weather","id","main","description","icon","hourly","daily","_useState4","location","setLocation","_useState5","_useState6","isScrollable","setIsScrollable","screenEl","useRef","useEffect","makeItClear","fetch","concat","then","res","json","data","cod","filter","e","i","a","slice","rain","makeItRain","snow","makeItSnow","_map","map","time","DateTime","fromJSDate","Date","setZone","hour","_map2","currentTime","setTimeAndRain","clientHeight","window","innerHeight","catch","error","console","log","searchValue","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","className","ref","toUpperCase","toFormat","Math","round","min","max","capitalizeText","viewBox","preserveAspectRatio","style","zIndex","d","stroke","fill","onClick","document","getElementsByClassName","classList","toggle","type","preventDefault","favorited","length","victory__WEBPACK_IMPORTED_MODULE_4__","domainPadding","y","padding","top","right","bottom","left","containerComponent","victory__WEBPACK_IMPORTED_MODULE_5__","pointerEvents","userSelect","touchAction","height","victory__WEBPACK_IMPORTED_MODULE_6__","victory__WEBPACK_IMPORTED_MODULE_7__","interpolation","x","labels","_ref","datum","day","key","weekdayShort","src","alt"],"mappings":"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","file":"static/js/4.9ba811f4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { DateTime } from 'luxon'\r\nimport { VictoryChart, VictoryLine, VictoryContainer, VictoryAxis } from 'victory'\r\nimport { makeItRain, makeItSnow, makeItClear, capitalizeText } from '../common/Utils'\r\n\r\nimport './WeatherScreen.css'\r\n\r\nfunction WeatherScreen(props) {\r\n  let { name, lat, lon } = useParams()\r\n  let [noResult, setNoResult] = useState(false)\r\n  let [location, setLocation] = useState({\r\n    lat: 0,\r\n    lon: 0,\r\n    timezone: 0,\r\n    timezone_offset: 0,\r\n    current: {\r\n      dt: 0,\r\n      sunrise: 0,\r\n      sunset: 0,\r\n      temp: 0,\r\n      feels_like: 0,\r\n      pressure: 0,\r\n      humidity: 0,\r\n      dew_point: 0,\r\n      uvi: 0,\r\n      clouds: 0,\r\n      visibility: 0,\r\n      wind_speed: 0,\r\n      wind_deg: 0,\r\n      weather: [\r\n        {\r\n          id: 0,\r\n          main: \"\",\r\n          description: \"\",\r\n          icon: \"\"\r\n        }\r\n      ]\r\n    },\r\n    hourly: [],\r\n    daily: []\r\n  })\r\n  let [isScrollable, setIsScrollable] = useState(true)\r\n  const screenEl = useRef(null) \r\n\r\n  useEffect(() => {\r\n    makeItClear()\r\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=dd7b078955b9a8f743b67fdd8db9a012&units=metric`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.cod) {\r\n          setNoResult(true)\r\n        } else {\r\n          setNoResult(false)\r\n          data.hourly = data.hourly.filter((e, i, a) => (i % 2 === 0)).slice(0, 7)\r\n          setLocation(data)\r\n          if (data.current.rain) makeItRain()\r\n          if (data.current.snow) makeItSnow()\r\n\r\n          let [currentTime, sunrise, sunset] = ['dt', 'sunrise', 'sunset'].map(time => \r\n            DateTime.fromJSDate(new Date(data.current[time] * 1000)).setZone(data.timezone).hour)\r\n          props.setTimeAndRain(currentTime, sunrise, sunset, !!(data.current.rain))\r\n        }\r\n        if(screenEl.current.clientHeight <= window.innerHeight) {\r\n          setIsScrollable(false)\r\n        }\r\n      })\r\n      .catch(error => console.log(error))\r\n  }, [props.searchValue, lat, lon])\r\n\r\n  function addFavorite(id, event) {\r\n    event.preventDefault()\r\n    console.log('Update favorite: ' + id)\r\n  }\r\n\r\n  function toggleMoreDetails() {\r\n    document.getElementsByClassName('show-more-btn')[0].classList.toggle('show-more')\r\n    document.getElementsByClassName('weather-summary')[0].classList.toggle('show-more')\r\n    document.getElementsByClassName('weather-details')[0].classList.toggle('show-more')\r\n  }\r\n\r\n  return noResult ?\r\n    (\r\n      <div className=\"screen\">\r\n        <h2>No data found</h2>\r\n      </div>\r\n    ) : (\r\n      <div className=\"screen weather-screen\" ref={screenEl}>\r\n        <section className=\"weather-summary back-row-toggle splat-toggle\">\r\n          <div className=\"rain front-row\" id=\"front-row\"></div>\r\n          <div className=\"rain back-row\" id=\"back-row\"></div>\r\n          <div className=\"snowflakes\"></div>\r\n\r\n          <h1>{name.toUpperCase()}</h1>\r\n          <h3>{DateTime.fromJSDate(new Date(location.current.dt * 1000)).setZone(location.timezone).toFormat('cccc, HH:mm')}</h3>\r\n          <div className=\"temp-range\">\r\n            <h1>{location.daily[0] ? Math.round(location.daily[0].temp.min) : Math.round(location.current.temp)}&deg;</h1>\r\n            <p>Low</p>\r\n          </div>\r\n          <div className=\"current-temp\">{Math.round(location.current.temp)}&deg;C</div>\r\n          <div className=\"temp-range\">\r\n            <h1>{location.daily[0] ? Math.round(location.daily[0].temp.max) : Math.round(location.current.temp)}&deg;</h1>\r\n            <p>High</p>\r\n          </div>\r\n          <h3 className=\"weather-status\">\r\n            {capitalizeText(location.current.weather[0].description)}\r\n          </h3>\r\n        </section>\r\n        <section className={'weather-details ' + (isScrollable ? '' : 'show-more')}>\r\n          <div className=\"wavy-border-container\">\r\n            <svg className=\"wavy-border\" viewBox=\"0 0 500 150\"\r\n              preserveAspectRatio=\"xMinYMin meet\"\r\n              style={{zIndex: -2}}>\r\n              <path d=\"M0, 50 C150, 120 350,  0 500, 70 L500, 250 L0, 250 Z\" \r\n              style={{stroke: 'none', fill: 'rgba(255, 255, 255, 0.5)'}}></path>\r\n            </svg>\r\n          </div>\r\n\r\n          <div className=\"wavy-border-container\">\r\n            <svg className=\"wavy-border\" viewBox=\"0 0 500 150\"\r\n              preserveAspectRatio=\"xMinYMin meet\"\r\n              style={{zIndex: -1}}>\r\n              <path d=\"M0, 30 C300, 0 400,   200 500, 20 L500, 250 L0, 250 Z\" \r\n              style={{stroke: 'none', fill: 'rgba(255, 255, 255, 0.5)'}}></path>\r\n            </svg>\r\n          </div>\r\n\r\n          <div className=\"wavy-border-container\">\r\n            <svg className=\"wavy-border\" viewBox=\"0 0 500 150\"\r\n              preserveAspectRatio=\"xMinYMin meet\"\r\n              style={{zIndex: -3}}>\r\n              <path d=\"M0, 50 C150, 200 350,  0 500, 50 L500, 250 L0, 250 Z\" \r\n              style={{stroke: 'none', fill: 'rgba(255, 255, 255, 0.5)'}}></path>\r\n            </svg>\r\n          </div>\r\n\r\n          <div className={'show-more-btn ' + (isScrollable ? '' : 'hidden')} onClick={toggleMoreDetails}></div>\r\n\r\n          <section className=\"weather-current\">\r\n            <button type=\"button\" className=\"icon-btn save-location-button hidden\" onClick={(e) => addFavorite(location.lat + location.lon, e)}>\r\n              {props.favorited ? (\r\n                <i className=\"material-icons\">favorite</i>\r\n              ) : (\r\n                  <i className=\"material-icons\">favorite_border</i>\r\n                )}\r\n            </button>\r\n            <div className=\"weather-stat\"><span>Humidity:</span> {location.current.humidity || 0} %</div>\r\n            <div className=\"weather-stat\"><span>Pressure:</span> {location.current.pressure || 0} hPa</div>\r\n            <div className=\"weather-stat\"><span>Wind:</span> {location.current.wind_speed || 0} m/s</div>\r\n            <div className=\"weather-stat\"><span>Cloud:</span> {location.current.clouds || 0} %</div>\r\n            <div className=\"weather-stat\"><span>Rain:</span> {location.current.rain ? location.current.rain['1h'] : 0} mm</div>\r\n            <div className=\"weather-stat\"><span>Snow:</span> {location.current.snow ? location.current.snow['1h'] : 0} mm</div>\r\n          </section>\r\n\r\n          {location.hourly.length &&\r\n            <section className=\"hourly-forecast\">\r\n              <h3 className=\"section_label\">Forecast</h3>\r\n              <VictoryChart\r\n                domainPadding={{ y: 10 }}\r\n                padding={{ top: 40, right: 20, bottom: 40, left: 20 }}\r\n                containerComponent={\r\n                  <VictoryContainer style={{\r\n                    pointerEvents: \"auto\",\r\n                    userSelect: \"auto\",\r\n                    touchAction: \"auto\"\r\n                  }} />\r\n                }\r\n                height={150}\r\n              >\r\n                <VictoryAxis />\r\n                <VictoryLine\r\n                  style={{\r\n                    data: { stroke: \"#c43a31\" }\r\n                  }}\r\n                  interpolation=\"natural\"\r\n                  data={\r\n                    location.hourly.map(hour => {\r\n                      let time = DateTime.fromJSDate(new Date(hour.dt * 1000)).setZone(location.timezone).hour\r\n                      return ({\r\n                        x: time > 12 ? `${time - 12}pm` : `${time}am`,\r\n                        y: Math.round(hour.temp)\r\n                      })\r\n                    })\r\n                  }\r\n                  labels={({ datum }) => datum.y + '\\xB0'}\r\n                />\r\n              </VictoryChart>\r\n            </section>\r\n          }\r\n\r\n          {location.daily.length &&\r\n            <section className=\"daily-forecast\">\r\n              <h3 className=\"section_label\">This week</h3>\r\n              <div className=\"scroll-container\">\r\n                <ul className=\"daily-forecast__list\">\r\n                  {location.daily.map(day => (\r\n                    <li className=\"daily-forecast__item\" key={day.dt}>\r\n                      <p>{DateTime.fromJSDate(new Date(day.dt * 1000)).setZone(location.timezone).weekdayShort}</p>\r\n                      <img src={\"http://openweathermap.org/img/wn/\" + day.weather[0].icon + \"@2x.png\"} alt=\"\" className=\"weather-icon daily-forecast__icon\" />\r\n                      <p>{Math.round(day.temp.min)}&deg; - {Math.round(day.temp.max)}&deg;</p>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n\r\n            </section>\r\n          }\r\n        </section>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default WeatherScreen"],"sourceRoot":""}